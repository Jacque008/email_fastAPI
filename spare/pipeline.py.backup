from __future__ import annotations
from dataclasses import dataclass
from typing import Optional
import pandas as pd
from ..services.services import DefaultServices
from ..dataset.email_dataset import EmailDataset
from ..dataset.errand_dataset import ErrandDataset

@dataclass
class EmailProcessingPipeline:
    """A high-level orchestrator. Use this when you want a single entry
    point to run the end-to-end flow with a clear OOP interface.

    You can pass a preloaded ErrandDataset to avoid DB roundtrips.
    """
    services: DefaultServices = DefaultServices()

    def run(
        self,
        emails_df: pd.DataFrame,
        errands: Optional[ErrandDataset] = None,
        do_categorize: bool = True,
        do_enrich_staff_animal: bool = False
    ) -> pd.DataFrame:
        emails = EmailDataset(emails_df, services=self.services)
        (emails
            .clean()
            .detect_sender()
            .generate_content() if False else emails  # kept for backwards compat; no-op
            .detect_receiver()
            .handle_vendor_specials()
            .extract_numbers()
            .extract_attachments()
        )
        if do_categorize:
            emails.categorize()
        if do_enrich_staff_animal:
            emails.enrich_staff_animal()
        emails.connect(errands=errands)
        emails.sort_by_date()
        return emails.to_frame()
